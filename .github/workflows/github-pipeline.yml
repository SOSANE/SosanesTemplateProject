name: Build et tester le projet

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build les containers
        run: |
          docker compose up --build -d
          sleep 30

      - name: ReviewDog
        uses: reviewdog/action-setup@d8edfce3dd5e1ec6978745e801f9c50b5ef80252 # v1.4.0
        with:
          reviewdog_version: latest

      - name: Analyse du code
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker exec project_backend pylint --output-format=github /backend/ \
            | reviewdog -f=checkstyle -name="pylint" -reporter=github-pr-review -fail-on-error=false -level=warning

      - name: Formatage
        uses: reviewdog/action-black@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning

      - name: Enregistrer une image
        run: |
          docker commit project_db project_db:latest
          docker commit project_backend project_backend:latest
          docker save project_db:latest project_backend:latest -o project.tar

      - name: Uploader une image en tant qu'artifact
        uses: actions/upload-artifact@v4
        with:
          name: projecttemplate-image
          path: project.tar
  test:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Télécharger l'artifact
        uses: actions/download-artifact@v4
        with:
          name: projecttemplate-image
          path: .

      - name: Télécharger l'image
        run: |
          docker load -i project.tar
          docker compose up -d
          sleep 30

      - name: Exécuter test API
        run: |
          docker exec project_backend python manage.py test tests
